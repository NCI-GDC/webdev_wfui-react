class Item extends React.Component {
    constructor(props) {
        super(props);
        this.state = { extend: false };
    }
    componentDidUpdate(prevProps, prevState) {
        const { extend } = this.state;
        if (extend !== prevState.extend) {
            this.props.isotope.arrange();
        }
    }
    render() {
        const { item, isotope } = this.props;
        if (this.state.extend) {
            return (
                <DashboardCard style={{height: '300px'}}>
                    <DashboardCard.Body>
                        <h1 className="title">{item}</h1>
                        <p>Testing</p>
                        <button onClick={() => this.setState({ extend: false })}>click</button>
                    </DashboardCard.Body>
                </DashboardCard>
            );
        }
        return (
            <DashboardCard>
                <DashboardCard.Body>
                    <h1 className="title">{item}</h1>
                    <p>Testing</p>
                    <button onClick={() => this.setState({ extend: true })}>click</button>
                </DashboardCard.Body>
            </DashboardCard>
        );
    }
}
class IsotopeGridContainer extends React.Component {
    constructor(props) {
        super(props);
        this.state={ data: [], sortBy: '', seconds: 0, searchTerm: '' };
    }

    componentDidMount() {
        this.interval = setInterval(() => {this.tick();}, 1000);
    }

    componentWillUnmount() {
        clearInterval(this.interval);
    }

    tick() {
        if (this.state.seconds === 6) {
            this.setState(prevState => ({
                seconds: prevState.seconds + 1,
                sortBy: 'title'
            }));
        } else if (this.state.seconds === 4) {
            this.setState(prevState => ({
                seconds: prevState.seconds + 1,
                data: ['labs', 'labs-ls', 'labs-pb', 'proj', 'proj-bg', 'jira', 'labs-pa', 'labs-webdev', 'proj-ms', 'proj-vhs', 'wiki', 'email'],
            }));
        } else if (this.state.seconds === 2) {
            this.setState(prevState => ({
                seconds: prevState.seconds + 1,
                data: ['labs', 'labs-ls', 'proj', 'proj-bg', 'jira'],
            }));
        }else if (this.state.seconds < 6) {
            this.setState(prevState => ({
                seconds: prevState.seconds + 1,
            }));
        }
    }

    render() {
        const { searchTerm, data, sortBy } = this.state;
        return (
            <div>
                <IsotopeGrid id="tester" searchTerm={searchTerm} sortBy={sortBy} getSortData={{title: '.title'}}>
                    {data && data.map((item, index) => (
                        <IsotopeGrid.Item key={index} item={item} itemDisplay={<Item />} />
                    ))}
                </IsotopeGrid>
            </div>
        );
    }
}

const example = (
    <Provider store={store}>
        <IsotopeGridContainer />
    </Provider>
);
return example;
